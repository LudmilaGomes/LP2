https://www.geeksforgeeks.org/socket-programming-cc/

Programação com sockets: forma de conectar dois nós numa rede para
que estes nós se comuniquem. Um socket 'escuta' uma porta particular
enquanto o outro socket alcança o primeiro para forma uma conexão.

Processo do servidor: 
socket() -> bind() -> listen() -> accept() -> read()/write() -> close()

Processo do cliente: 
socket() -> connect() -> write()/read() -> close()

(sockets facilitam a comunicação entre processos)

==========//==========

Estágios para criação do servidor:

1- Criação do socket

    int sockfd = socket(domain, type, protocol);

    sockfd: inteiro descritor do socket (como file-handle);
    domain: inteiro que especifica domínio da comunicação. Seguindo o padrão POSIX,
    usamos 'AF_LOCAL' para comunicação entre processos em um mesmo host. Para comunicação
    entre processos conectados em hosts diferentes por IPV4 usamos 'AF_INET' e, para IPV6,
    usamos AF_INET6;
    type: tipo de comunicação, SOCK_STREAM (TCP) ou SOCK_DGRAM (UDP);
    protocolo:valor de protocolo para IP (Internet Protocol), que é 0

2- Setsockopt: ajuda na manipulação de opções do socket referido pelo descritor
de arquivo sockfd (é opcional, mas ajuda no reuso de endereços e portas; previne
erros como 'endereço já está sendo usado').

    int setsockopt(int sockfd, int level, int optname,  const void *optval, socklen_t optlen);

3- Bind: depois da criação do socket, a função bind() vincula o socket aos números de
endereço e porta especificados em addr(custom data structure).

    int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

4- Listen: põe o socket do servidor em modo passivo, ou seja, em espera
pela chegada do cliente no servidor para fazer a conexão. 'backlog' define
o máximo que a pilha de conexões pendentes pode crescer. Se a pilha estiver
cheia, o cliente recebe um erro com a indicação de 'ECONNREFUSED'.

    int listen(int sockfd, int backlog);

5- Accept: extrai a primeira conexão da pilha de conexões pendentes para o
socket que está 'escutando' (sockfd), cria um novo socket conectado e retorna
um novo descritor de arquivo que se refere a esse novo socket criado. Neste ponto,
a conexão é estabelecida entre cliente e servidor e eles estão prontos para que
haja transferência de dados entre eles.

    int new_socket= accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

==========//==========

Estágios para criação do cliente:

1- Conexão do socket: exatamente como na criação do socket do servidor.

2- Conexão: a chamada de sistema connect() conecta o socket referido pelo
descritor de arquivo sockfd ao endereço especificado por addr. O endereço e
porta do servidor estão especificador em addr.

    int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);